-- TEST CASE 1: creating a table and then calling hashbytes for nvarchar and varchar input
insert into TestHash values('value1', 'value1');
GO
~~ROW COUNT: 1~~


SELECT DATALENGTH( nvarchar_data) as nvarchar_data_datalength
        , LEN( nvarchar_data) AS nvarchar_data_len
        , DATALENGTH( varchar_data) as varchar_data_btyes_datalength
        , LEN( varchar_data) AS varchar_data_len
        , * 
from TestHash;
GO
~~START~~
int#!#int#!#int#!#int#!#nvarchar#!#varchar#!#varbinary#!#varbinary#!#varbinary#!#varbinary
6#!#6#!#6#!#6#!#value1#!#value1#!#8107759ABABCBFA34BCB02BC4309CAF6354982AB#!#8107759ABABCBFA34BCB02BC4309CAF6354982AB#!#8107759ABABCBFA34BCB02BC4309CAF6354982AB#!#8107759ABABCBFA34BCB02BC4309CAF6354982AB
~~END~~

-- TEST CASE 2: Casting nvarchar and varchar with different algorithms using Hashbytes
SELECT hashbytes( 'sha1', 'test string' ) as vary_string, hashbytes( 'sha1', N'test string' ) as unicode_string
GO
~~START~~
varbinary#!#varbinary
661295C9CBF9D6B2F6428414504A8DEED3020641#!#661295C9CBF9D6B2F6428414504A8DEED3020641
~~END~~


SELECT hashbytes( 'MD2', 'test string' ) as vary_string, hashbytes( 'MD2', N'test string' ) as unicode_string
GO
~~START~~
varbinary#!#varbinary
<NULL>#!#<NULL>
~~END~~


SELECT hashbytes( 'MD4', 'test string' ) as vary_string, hashbytes( 'MD4', N'test string' ) as unicode_string
GO
~~START~~
varbinary#!#varbinary
<NULL>#!#<NULL>
~~END~~


SELECT hashbytes( 'MD5', 'test string' ) as vary_string, hashbytes( 'MD5', N'test string' ) as unicode_string
GO
~~START~~
varbinary#!#varbinary
6F8DB599DE986FAB7A21625B7916589C#!#6F8DB599DE986FAB7A21625B7916589C
~~END~~


SELECT hashbytes( 'SHA2_256', 'test string' ) as vary_string, hashbytes( 'SHA2_256', N'test string' ) as unicode_string
GO
~~START~~
varbinary#!#varbinary
D5579C46DFCC7F18207013E65B44E4CB4E2C2298F4AC457BA8F82743F31E930B#!#D5579C46DFCC7F18207013E65B44E4CB4E2C2298F4AC457BA8F82743F31E930B
~~END~~


SELECT hashbytes( 'SHA2_512', 'test string' ) as vary_string, hashbytes( 'SHA2_512', N'test string' ) as unicode_string
GO
~~START~~
varbinary#!#varbinary
10E6D647AF44624442F388C2C14A787FF8B17E6165B83D767EC047768D8CBCB71A1A3226E7CC7816BC79C0427D94A9DA688C41A3992C7BF5E4D7CC3E0BE5DBAC#!#10E6D647AF44624442F388C2C14A787FF8B17E6165B83D767EC047768D8CBCB71A1A3226E7CC7816BC79C0427D94A9DA688C41A3992C7BF5E4D7CC3E0BE5DBAC
~~END~~


SELECT hashbytes( 'SHA', 'test string' ) as vary_string, hashbytes( 'SHA', N'test string' ) as unicode_string
GO
~~START~~
varbinary#!#varbinary
661295C9CBF9D6B2F6428414504A8DEED3020641#!#661295C9CBF9D6B2F6428414504A8DEED3020641
~~END~~


SELECT hashbytes( 'sha1', 'test string')
GO
~~START~~
varbinary
661295C9CBF9D6B2F6428414504A8DEED3020641
~~END~~

--TEST CASE 3: testing hashbytes via casting a varchar to nvarchar 
SELECT hashbytes('sha1',cast('test string' as sys.nvarchar))
GO
~~START~~
varbinary
661295C9CBF9D6B2F6428414504A8DEED3020641
~~END~~



--TEST CASE 4: Casting function for nvarchar to varbinary
SELECT cast(N'test string' as varbinary);
GO
~~START~~
varbinary
7400650073007400200073007400720069006E006700
~~END~~


SELECT cast(cast(cast('ab' AS nvarchar(10)) as varbinary(2)) as nvarchar(2));
GO
~~START~~
nvarchar
a
~~END~~


-- Test Case 5: Empty strings and NULL values
SELECT HASHBYTES('SHA1', '') AS empty_varchar,
       HASHBYTES('SHA1', N'') AS empty_nvarchar,
       HASHBYTES('SHA1', NULL) AS null_input;
GO
~~START~~
varbinary#!#varbinary#!#varbinary
DA39A3EE5E6B4B0D3255BFEF95601890AFD80709#!#DA39A3EE5E6B4B0D3255BFEF95601890AFD80709#!#<NULL>
~~END~~


-- Test Case 6: Unicode characters
SELECT HASHBYTES('SHA1', N'„Åì„Çì„Å´„Å°„ÅØ') AS japanese,
       HASHBYTES('SHA1', N'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ') AS russian,
       HASHBYTES('SHA1', N'üôÇüòäüòÄ') AS emojis;
GO
~~START~~
varbinary#!#varbinary#!#varbinary
20427A708C3F6F07CF12AB23557982D9E6D23B61#!#E2D105A2541F2DC6C8B93DF73D07DF30B33FD80A#!#3B114970B215D62CB987A4D5644FEE7001C78234
~~END~~


-- Test Case 8: Different collations
SELECT HASHBYTES('SHA1', N'hello' COLLATE Latin1_General_CI_AS) AS ci_as,
       HASHBYTES('SHA1', N'hello' COLLATE Latin1_General_CS_AS) AS cs_as;
GO
~~START~~
varbinary#!#varbinary
AAF4C61DDCC5E8A2DABEDE0F3B482CD9AEA9434D#!#AAF4C61DDCC5E8A2DABEDE0F3B482CD9AEA9434D
~~END~~


-- Test Case 9: Combining varchar and nvarchar
SELECT HASHBYTES('SHA1', 'hello' + N'world') AS combined;
GO
~~START~~
varbinary
6ADFB183A4A2C94A2F92DAB5ADE762A47889A5A1
~~END~~


-- Test Case 10: Roundtrip conversions
SELECT CAST(CAST(N'test' AS VARBINARY(8)) AS NVARCHAR(4)) AS nvarchar_roundtrip,
       CAST(CAST('test' AS VARBINARY(8)) AS VARCHAR(4)) AS varchar_roundtrip;
GO
~~START~~
nvarchar#!#varchar
test#!#test
~~END~~


-- Test Case 11: CAST and CONVERT between varchar, nvarchar, and varbinary
SELECT CAST(N'hello' AS VARBINARY(10)) AS nvarchar_to_varbinary,
       CAST('hello' AS VARBINARY(10)) AS varchar_to_varbinary,
       CONVERT(VARBINARY(10), N'hello') AS nvarchar_to_varbinary_convert,
       CONVERT(VARBINARY(10), 'hello') AS varchar_to_varbinary_convert;
GO
~~START~~
varbinary#!#varbinary#!#varbinary#!#varbinary
680065006C006C006F00#!#68656C6C6F#!#68656C6C6F#!#68656C6C6F
~~END~~


-- Test Case 12: Testing with special characters
SELECT HASHBYTES('SHA1', 'Hello, World!') AS varchar_special,
       HASHBYTES('SHA1', N'Hello, World!') AS nvarchar_special,
       HASHBYTES('SHA1', 'Hello' + CHAR(13) + CHAR(10) + 'World') AS varchar_newline,
       HASHBYTES('SHA1', N'Hello' + NCHAR(13) + NCHAR(10) + N'World') AS nvarchar_newline;
GO
~~START~~
varbinary#!#varbinary#!#varbinary#!#varbinary
0A0A9F2A6772942557AB5355D76AF442F8F65E01#!#0A0A9F2A6772942557AB5355D76AF442F8F65E01#!#62E451F6ED58D1FF234A05B8467C0CEB1D4B285F#!#62E451F6ED58D1FF234A05B8467C0CEB1D4B285F
~~END~~


-- Test Case 13: NVARCHAR -> VARBINARY -> VARCHAR -> NVARCHAR -> VARBINARY
SELECT CAST(
    CAST(
        CAST(
            CAST(N'Hello World' AS VARBINARY(100))
        AS VARCHAR(100))
    AS NVARCHAR(100))
AS VARBINARY(100)) AS four_casts;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Failed to convert from data type varbinary to varchar, invalid byte sequence for encoding "WIN1252": 0x00)~~


-- Test Case 14: VARCHAR -> NVARCHAR -> VARBINARY -> NVARCHAR -> VARCHAR
SELECT CAST(
    CAST(
        CAST(
            CAST('Test String' AS NVARCHAR(50))
        AS VARBINARY(50))
    AS NVARCHAR(50))
AS VARCHAR(50)) AS four_casts;
GO
~~START~~
varchar
Test String
~~END~~


-- Test Case 15: Implicit conversion from data type nvarchar to varbinary is not allowed.
DECLARE @a varbinary(10); SET @a = CAST(N'21' AS nvarchar(10)); SELECT @a
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Implicit conversion from data type nvarchar to varbinary is not allowed. Use the CONVERT function to run this query.)~~


-- Test Case 16: Casting with UDT on nvarchar -> varbinary, UDT on varbinary to nvarchar, UDT on nvarchar to UDT on varbinary
create type user_defined_nvarchar from nvarchar(50);
select cast(cast(N'test string' as user_defined_nvarchar) as varbinary)
GO
~~START~~
varbinary
7400650073007400200073007400720069006E006700
~~END~~


create type user_defined_varbinary from varbinary(50);
select cast(cast(0x7400650073007400200073007400720069006E006700 as user_defined_varbinary) as nvarchar)
GO
~~START~~
nvarchar
test string
~~END~~


select cast(cast(N'test string' as user_defined_nvarchar) as user_defined_varbinary)
go
~~START~~
varbinary
7400650073007400200073007400720069006E006700
~~END~~

-- Test Case 17: NVARCHAR-> BINARY
select cast(N'test string' as binary)
GO
~~START~~
binary
7400650073007400200073007400720069006E0067000000000000000000
~~END~~

-- Test Case 18: NVARCHAR-> User Defined varbinary
select cast(N'test string' as user_defined_varbinary)
GO
~~START~~
varbinary
7400650073007400200073007400720069006E006700
~~END~~

-- Test Case 19: User defined hashbytes function
create function dbo.hashbytes(@data sys.varchar)returns sys.varchar AS BEGIN    return "dummy hashbytes";END
GO
SELECT hashbytes( 'SHA', 'test string' ) as vary_string, hashbytes( 'SHA', N'test string' ) as unicode_string
GO
~~START~~
varbinary#!#varbinary
661295C9CBF9D6B2F6428414504A8DEED3020641#!#661295C9CBF9D6B2F6428414504A8DEED3020641
~~END~~

select hashbytes('abc')
GO
~~START~~
varchar
~~ERROR (Code: 33557097)~~

~~ERROR (Message: column "dummy hashbytes" does not exist)~~

drop function dbo.hashbytes
GO


-- Test 20: Calling the function, procedure, views from prepare scripts
-- Test CastNVarcharToVarbinary function
DECLARE @TestString NVARCHAR(100) = N'Test String';
DECLARE @BinaryResult VARBINARY(MAX);
SET @BinaryResult = dbo.CastNVarcharToVarbinary(@TestString);
select cast (@BinaryResult as nvarchar)
GO
~~START~~
nvarchar
Test String
~~END~~



-- Test CastVarbinaryToNVarchar function
DECLARE @TestBinary VARBINARY(100) = 0x54657374537472696E67; -- 'Test String' in ASCII
DECLARE @StringResult NVARCHAR(MAX);
SET @StringResult = dbo.CastVarbinaryToNVarchar(@TestBinary);
select cast (@StringResult as nvarchar)
GO
~~START~~
nvarchar
ÊïîÁë≥ÁëìÊ•≤ÊùÆ
~~END~~



-- Test CastDemoView
DECLARE @ViewResult TABLE (
    NVarcharToVarbinary VARBINARY(MAX),
    VarbinaryToNVarchar NVARCHAR(MAX)
);
INSERT INTO @ViewResult
SELECT * FROM dbo.CastDemoView;
go
~~ROW COUNT: 1~~


-- TEST CASE 21: Assigned Casting
DECLARE @NVarcharValue NVARCHAR(100) = N'Hello, World!';
DECLARE @AssignedVarbinary VARBINARY(100);
SET @AssignedVarbinary = CAST(@NVarcharValue AS VARBINARY(100));
select CAST(@AssignedVarbinary AS NVARCHAR(100));
GO
~~START~~
nvarchar
Hello, World!
~~END~~




--TEST CASE 22: Calling hashbytes via function, procedure, views
-- Test the HashMultipleTypes function
DECLARE @TestVarchar VARCHAR(10) = 'Test';
DECLARE @TestNVarchar NVARCHAR(10) = N'Test';
DECLARE @TestVarbinary VARBINARY(10) = 0x54657374; -- 'Test' in ASCII
SELECT * FROM dbo.HashMultipleTypes(@TestVarchar, @TestNVarchar, @TestVarbinary);
GO
~~START~~
varbinary#!#varbinary#!#varbinary
532EAABD9574880DBF76B9B8CC00832C20A6EC113D682299550D7A6E0F345E25#!#532EAABD9574880DBF76B9B8CC00832C20A6EC113D682299550D7A6E0F345E25#!#532EAABD9574880DBF76B9B8CC00832C20A6EC113D682299550D7A6E0F345E25
~~END~~

-- Test the HashDemoView
SELECT * FROM dbo.HashDemoView;
GO
~~START~~
varbinary#!#varbinary#!#varbinary
185F8DB32271FE25F561A6FC938B2E264306EC304EDA518007D1764826381969#!#185F8DB32271FE25F561A6FC938B2E264306EC304EDA518007D1764826381969#!#185F8DB32271FE25F561A6FC938B2E264306EC304EDA518007D1764826381969
~~END~~


--TEST CASE 23: BINARY TO NVARCHAR
select cast(cast(N'test string' as binary) as nvarchar)
GO
~~START~~
nvarchar
test string
~~END~~



