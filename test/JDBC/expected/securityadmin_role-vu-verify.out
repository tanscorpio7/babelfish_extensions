-- tsql
select is_srvrolemember('sysadmin', 'securityadmin')
go
~~START~~
int
0
~~END~~


select is_srvrolemember('securityadmin', 'sysadmin')
go
~~START~~
int
0
~~END~~


alter login securityadmin_login1 with password='123'
go

alter login no_securityadmin_login1 with password='123'
go

TRUNCATE TABLE sadm_sp_helpsrvrolemember_tbl
GO

-- sp_helpsrvrolemember
INSERT INTO sadm_sp_helpsrvrolemember_tbl (ServerRole, MemberName, MemberSID) EXEC sp_helpsrvrolemember 'securityadmin'
GO

SELECT ServerRole, MemberName, (CASE WHEN MemberSID IS NULL THEN 0 ELSE 1 END) FROM sadm_sp_helpsrvrolemember_tbl where MemberName like '%securityadmin%'
GO
~~START~~
varchar#!#varchar#!#int
~~END~~


-- make login member of securityadmin
Alter server role securityadmin add member securityadmin_login1
go

select * from securityadmin_show_role_mem where MemberPrincipalName like 'jdbc_user' or MemberPrincipalName like '%securityadmin_%'
go
~~START~~
varchar#!#varchar
sysadmin#!#jdbc_user
securityadmin#!#securityadmin_login1
~~END~~


-- should error out
create login securityadmin with password = '123'
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The Server principal 'securityadmin' already exists)~~


-- terminate-tsql-conn

-- tsql user=securityadmin_login1 password=123
-- Case 1 - positives 
-- securityadmin's login privileges
-- alter server role securityadmin should be allowed
select bbf_is_member_of_role_nosuper(suser_id(), suser_id('securityadmin'))
go
~~START~~
bit
1
~~END~~


select bbf_is_member_of_role_nosuper(suser_id(), suser_id('sysadmin'))
go
~~START~~
bit
0
~~END~~


Alter server role securityadmin add member no_securityadmin_login1
go

Alter server role securityadmin drop member no_securityadmin_login1
go

-- create login should be allowed
-- windows login
create login [babel\securityadmin_l1] from windows;
go

-- password based login
create login securityadmin_l2 with password = '123'
go

-- alter login should be allowed
-- password based login
alter login securityadmin_l2 with password = '123'
go

ALTER LOGIN securityadmin_l2 WITH PASSWORD = '1234' OLD_PASSWORD = '123';
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'OLD_PASSWORD' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_login_old_password to ignore)~~


ALTER LOGIN securityadmin_l2 disable;
go

ALTER LOGIN securityadmin_l2 enable;
go

ALTER LOGIN securityadmin_l2 with default_database=securityadmin_db1;
go

-- windows login
alter login [babel\securityadmin_l1] with PASSWORD='123'
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot use parameter PASSWORD for a windows login)~~


ALTER LOGIN [babel\securityadmin_l1] WITH PASSWORD = '1234' OLD_PASSWORD = '123';
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'OLD_PASSWORD' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_login_old_password to ignore)~~


ALTER LOGIN [babel\securityadmin_l1] disable;
go

ALTER LOGIN [babel\securityadmin_l1] enable;
go

ALTER LOGIN [babel\securityadmin_l1] with default_database=securityadmin_db1;
go

-- make altering login member of securityadmin
Alter server role securityadmin add member securityadmin_l2
go

-- alter securityadmin member login
-- allowed
alter login securityadmin_l2 with password = '123'
go

-- drop login should be allowed
-- password based login
drop login securityadmin_l2
go

-- windows login
drop login [babel\securityadmin_l1]
go

-- grant server permissions (currently not supported)
-- few examples
GRANT CONTROL SERVER TO no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'GRANT Database' is not currently supported in Babelfish)~~


GRANT ALTER ANY EVENT NOTIFICATION TO no_securityadmin_login1 WITH GRANT OPTION; 
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'GRANT Database' is not currently supported in Babelfish)~~


GRANT ALTER ANY DATABASE TO no_securityadmin_login1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'GRANT Database' is not currently supported in Babelfish)~~



-- terminate-tsql-conn user=securityadmin_login1 password=123

-- tsql user=no_securityadmin_login1 password=123
-- grant database permissions (only connect is supported)
-- allowed
use securityadmin_db1
go

-- terminate-tsql-conn user=no_securityadmin_login1 password=123

-- tsql user=securityadmin_login1 password=123 database=securityadmin_db1
REVOKE CONNECT FROM no_securityadmin_user1
go

-- unsupported
GRANT SHOWPLAN TO no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'GRANT Database' is not currently supported in Babelfish)~~


GRANT CREATE VIEW TO no_securityadmin_user1 WITH GRANT OPTION;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'GRANT Database' is not currently supported in Babelfish)~~


-- terminate-tsql-conn user=securityadmin_login1 password=123 database=securityadmin_db1

-- tsql user=no_securityadmin_login1 password=123
-- connection revoked
use securityadmin_db1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The server principal "no_securityadmin_login1" is not able to access the database "securityadmin_db1" under the current security context)~~


-- terminate-tsql-conn user=no_securityadmin_login1 password=123

-- tsql user=securityadmin_login1 password=123 database=securityadmin_db1
-- revoke server permissions (currently not supported)
-- few examples
REVOKE CONTROL SERVER FROM no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'REVOKE Database' is not currently supported in Babelfish)~~


REVOKE ALTER ANY EVENT NOTIFICATION FROM no_securityadmin_login1; 
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'REVOKE Database' is not currently supported in Babelfish)~~


REVOKE ALTER ANY DATABASE FROM no_securityadmin_login1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'REVOKE Database' is not currently supported in Babelfish)~~


-- grant database permissions (only connect is supported)
GRANT CONNECT TO no_securityadmin_user1
go

-- terminate-tsql-conn user=securityadmin_login1 password=123 database=securityadmin_db1

-- tsql user=no_securityadmin_login1 password=123
use securityadmin_db1
go

-- Check unprivileged login should not have access
-- permission denied
EXEC sp_addlinkedsrvlogin 'Accounts', 'False'
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: User does not have permission to perform this action.)~~


EXEC sp_droplinkedsrvlogin 'Accounts', NULL
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: User does not have permission to perform this action.)~~


Alter server role securityadmin add member no_securityadmin_login1
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Current login no_securityadmin_login1 does not have permission to alter server role)~~


Alter server role securityadmin drop member no_securityadmin_login1
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Current login no_securityadmin_login1 does not have permission to alter server role)~~


-- only current login and fixed server roles
SELECT name, type, type_desc, default_database_name, default_language_name, credential_id, owning_principal_id, is_fixed_role
FROM sys.server_principals ORDER BY name
GO
~~START~~
varchar#!#char#!#nvarchar#!#varchar#!#varchar#!#int#!#int#!#bit
dbcreator#!#R#!#SERVER_ROLE#!#<NULL>#!#English#!#<NULL>#!#1#!#1
jdbc_user#!#S#!#SQL_LOGIN#!#master#!#English#!#-1#!#-1#!#0
no_securityadmin_login1#!#S#!#SQL_LOGIN#!#master#!#English#!#-1#!#-1#!#0
public#!#R#!#SERVER_ROLE#!#<NULL>#!#<NULL>#!#<NULL>#!#1#!#0
securityadmin#!#R#!#SERVER_ROLE#!#<NULL>#!#English#!#<NULL>#!#1#!#1
sysadmin#!#R#!#SERVER_ROLE#!#<NULL>#!#English#!#<NULL>#!#1#!#1
~~END~~


-- only current login
select name, type, usage from sys.login_token order by name;
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar
no_securityadmin_login1#!#SQL LOGIN#!#GRANT OR DENY
~~END~~


-- terminate-tsql-conn user=no_securityadmin_login1 password=123

-- tsql user=securityadmin_login1 password=123
-- unsupported
REVOKE SHOWPLAN FROM no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'REVOKE Database' is not currently supported in Babelfish)~~


REVOKE CREATE VIEW FROM no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'REVOKE Database' is not currently supported in Babelfish)~~


-- System objects
-- All rows of server_prinicipals view should be visible to securityadmin login
-- limited rows should get displayed
SELECT name, type, type_desc, default_database_name, default_language_name, credential_id, owning_principal_id, is_fixed_role
FROM sys.server_principals 
WHERE name in ('jdbc_user', 'sysadmin', 'public', 'securityadmin') ORDER BY name;
GO
~~START~~
varchar#!#char#!#nvarchar#!#varchar#!#varchar#!#int#!#int#!#bit
jdbc_user#!#S#!#SQL_LOGIN#!#master#!#English#!#-1#!#-1#!#0
public#!#R#!#SERVER_ROLE#!#<NULL>#!#<NULL>#!#<NULL>#!#1#!#0
securityadmin#!#R#!#SERVER_ROLE#!#<NULL>#!#English#!#<NULL>#!#1#!#1
sysadmin#!#R#!#SERVER_ROLE#!#<NULL>#!#English#!#<NULL>#!#1#!#1
~~END~~


SELECT name, type, type_desc, default_database_name, default_language_name, credential_id, owning_principal_id, is_fixed_role
FROM sys.server_principals name WHERE name like '%securityadmin%' ORDER BY name;
GO
~~START~~
varchar#!#char#!#nvarchar#!#varchar#!#varchar#!#int#!#int#!#bit
no_securityadmin_login1#!#S#!#SQL_LOGIN#!#master#!#English#!#-1#!#-1#!#0
securityadmin#!#R#!#SERVER_ROLE#!#<NULL>#!#English#!#<NULL>#!#1#!#1
securityadmin_login1#!#S#!#SQL_LOGIN#!#master#!#English#!#-1#!#-1#!#0
~~END~~


-- current login along with current fixed role should be visible
select name, type, usage from sys.login_token order by name;
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar
securityadmin#!#SERVER ROLE#!#GRANT OR DENY
securityadmin_login1#!#SQL LOGIN#!#GRANT OR DENY
~~END~~


select name, sysadmin, securityadmin from syslogins where name like '%securityadmin%' order by name
go
~~START~~
varchar#!#int#!#int
no_securityadmin_login1#!#0#!#0
securityadmin_login1#!#0#!#1
~~END~~


-- should return 0
select is_srvrolemember ('sysadmin')
go
~~START~~
int
0
~~END~~


-- should return 1
select is_srvrolemember ('securityadmin')
go
~~START~~
int
1
~~END~~


select is_srvrolemember ('securityadmin', 'securityadmin_login1')
go
~~START~~
int
1
~~END~~


-- terminate-tsql-conn user=securityadmin_login1 password=123

-- psql
CREATE EXTENSION IF NOT EXISTS tds_fdw;
GO

-- tsql
-- Add localhost as linked server
EXEC sp_addlinkedserver  @server = N'server_4229', @srvproduct=N'', @provider=N'SQLNCLI', @datasrc=N'localhost', @catalog=N'master'
GO

EXEC sp_addlinkedserver  'Accounts'
GO

-- Add jdbc_user as linked server login
EXEC sp_addlinkedsrvlogin @rmtsrvname = 'server_4229', @useself = 'FALSE', @rmtuser = 'jdbc_user', @rmtpassword = '12345678'
GO

drop database securityadmin_db1
go

-- terminate-tsql-conn

-- tsql user=securityadmin_login1 password=123
EXEC sp_addlinkedsrvlogin 'Accounts', 'False'
GO

EXEC sp_droplinkedsrvlogin 'Accounts', NULL
GO

-- inside procedure
exec securityadmin_create_login_p1
go

exec securityadmin_alter_login_p1
go

exec securityadmin_add_mem_p1
go

exec securityadmin_drop_mem_p1
go

exec securityadmin_drop_login_p1
go

-- terminate-tsql-conn user=securityadmin_login1 password=123

-- tsql
-- login is member of both securityadmin as well as sysadmin
drop user securityadmin_user1
go

Alter server role sysadmin add member securityadmin_login1
go

create database securityadmin_db1
go

-- terminate-tsql-conn

-- tsql user=securityadmin_login1 password=123
-- it should be able to connect to the database
use securityadmin_db1
go

-- it should be dbo
select current_user
go
~~START~~
varchar
dbo
~~END~~


-- both attribute should be true
select rolname, rolcreaterole, rolcreatedb from pg_roles where rolname = 'securityadmin_login1'
go
~~START~~
varchar#!#bit#!#bit
securityadmin_login1#!#1#!#1
~~END~~


-- terminate-tsql-conn user=securityadmin_login1 password=123

-- tsql
-- only member of securityadmin
alter server role sysadmin drop member securityadmin_login1
go

create user securityadmin_user1 for login securityadmin_login1
go

-- terminate-tsql-conn

-- tsql user=securityadmin_login1 password=123

-- only rolcreaterole attribute should be true
select rolname, rolcreaterole, rolcreatedb from pg_roles where rolname = 'securityadmin_login1'
go
~~START~~
varchar#!#bit#!#bit
securityadmin_login1#!#1#!#0
~~END~~


-- should be able to create/drop login
create login test_securityadmin_l1 with password ='123'
go

drop login test_securityadmin_l1
go

-- terminate-tsql-conn user=securityadmin_login1 password=123

-- tsql
-- only member of sysadmin
drop user securityadmin_user1
go

alter server role sysadmin add member securityadmin_login1
go

alter server role securityadmin drop member securityadmin_login1
go

-- terminate-tsql-conn

-- tsql user=securityadmin_login1 password=123

-- both attribute should be true
select rolname, rolcreaterole, rolcreatedb from pg_roles where rolname = 'securityadmin_login1'
go
~~START~~
varchar#!#bit#!#bit
securityadmin_login1#!#1#!#1
~~END~~


-- should be able to create/drop login
create login test_securityadmin_l1 with password ='123'
go

drop login test_securityadmin_l1
go

-- should return 1
select is_srvrolemember ('sysadmin')
go
~~START~~
int
1
~~END~~


-- should return 1
select is_srvrolemember ('securityadmin')
go
~~START~~
int
1
~~END~~


-- terminate-tsql-conn user=securityadmin_login1 password=123

-- tsql
-- make it member of securityadmin only
alter server role sysadmin drop member securityadmin_login1
go

alter server role securityadmin add member securityadmin_login1
go

drop user no_securityadmin_user1
go

alter server role sysadmin add member no_securityadmin_login1
go

create user securityadmin_user1 for login securityadmin_login1
go

TRUNCATE TABLE sadm_sp_helpsrvrolemember_tbl
GO

-- sp_helpsrvrolemember
INSERT INTO sadm_sp_helpsrvrolemember_tbl (ServerRole, MemberName, MemberSID) EXEC sp_helpsrvrolemember 'securityadmin'
GO
~~ROW COUNT: 1~~


SELECT ServerRole, MemberName, (CASE WHEN MemberSID IS NULL THEN 0 ELSE 1 END) FROM sadm_sp_helpsrvrolemember_tbl where MemberName like '%securityadmin%'
GO
~~START~~
varchar#!#varchar#!#int
securityadmin#!#securityadmin_login1#!#1
~~END~~


-- terminate-tsql-conn

-- tsql user=securityadmin_login1 password=123
-- Case 2 - negatives
-- alter server role sysadmin should give permission denied
Alter server role sysadmin add member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Current login securityadmin_login1 does not have permission to alter server role)~~


-- alter server role securityadmin add member db roles should error out
Alter server role securityadmin add member guest
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "guest" does not exist)~~


-- alter sysadmin login should give permission denied
-- login which is altered is member of sysadmin
Alter login no_securityadmin_login1 with password ='123'
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot alter the login 'no_securityadmin_login1', because it does not exist or you do not have permission.)~~


-- terminate-tsql-conn user=securityadmin_login1 password=123

-- tsql
-- make member of securityadmin as well
alter server role securityadmin add member no_securityadmin_login1
go

-- terminate-tsql-conn

-- tsql user=securityadmin_login1 password=123
-- login which is altered is member of sysadmin and securityadmin both
-- permission denied
Alter login no_securityadmin_login1 with password ='123'
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot alter the login 'no_securityadmin_login1', because it does not exist or you do not have permission.)~~


-- terminate-tsql-conn user=securityadmin_login1 password=123

-- tsql
alter server role securityadmin drop member no_securityadmin_login1
go

alter server role sysadmin drop member no_securityadmin_login1
go

create user no_securityadmin_user1 for login no_securityadmin_login1
go

create role dummy_role
go

drop database securityadmin_db1
go

-- terminate-tsql-conn

-- tsql user=securityadmin_login1 password=123
-- should error out
Alter server role securityadmin add member dummy_role
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "dummy_role" does not exist)~~


-- create database permission denied
create database perm_denied_db
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied to create database)~~


-- terminate-tsql-conn user=securityadmin_login1 password=123

-- tsql
drop role dummy_role
go

create database securityadmin_db1
go

use securityadmin_db1
go

create user securityadmin_user1 for login securityadmin_login1
go

create user no_securityadmin_user1 for login no_securityadmin_login1
go

-- terminate-tsql-conn

-- tsql user=securityadmin_login1 password=123
-- alter database permission denied
alter database securityadmin_db1 modify name = rename_db_database1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: User does not have permission to rename the database 'securityadmin_db1', the database does not exist, or the database is not in a state that allows access checks.)~~


alter authorization on database::securityadmin_db1 to no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot find the principal 'no_securityadmin_login1', because it does not exist or you do not have permission.)~~


-- drop database permission denied
drop database securityadmin_db1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of database securityadmin_db1)~~


-- securityadmin login's mapped user should not have any priv
select current_user, db_name()
go
~~START~~
varchar#!#nvarchar
securityadmin_user1#!#master
~~END~~


select suser_name()
go
~~START~~
nvarchar
securityadmin_login1
~~END~~


-- allowed
create login securityadmin_l2 with password = '123'
go

-- create objects/user permission denied
create user securityadmin_l2
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: User does not have permission to perform this action.)~~


create role securityadmin_role1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: User does not have permission to perform this action.)~~


create schema perm_denied_scm
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for database jdbc_testdb)~~


create view perm_denied_v1 as select 1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for schema master_dbo)~~


create table perm_denied_tb1 (a int);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for schema master_dbo)~~


select 1 into perm_denied_tb2;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for schema master_dbo)~~


create function perm_denied_func1() returns int as begin return 1 end;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for schema master_dbo)~~


create procedure perm_denied_proc1 as begin select 1; end
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for schema master_dbo)~~


create type perm_denied_typ1 from int;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for schema master_dbo)~~


create index perm_denied_index1 on securityadmin_tb1(a);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of table securityadmin_tb1)~~


CREATE FUNCTION perm_denied_func1() RETURNS TABLE AS RETURN ( SELECT 1 AS Value);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for schema master_dbo)~~


-- DMLS on object permission denied
Alter user no_securityadmin_user1 with DEFAULT_SCHEMA=securityadmin_scm1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Current user does not have privileges to change schema)~~


Alter role securityadmin_rol add member no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Current login securityadmin_login1 does not have permission to alter role master_securityadmin_rol)~~


Alter role securityadmin_rol drop member no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Current login securityadmin_login1 does not have permission to alter role master_securityadmin_rol)~~


Alter table securityadmin_tb1 add b int
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of table securityadmin_tb1)~~


Insert into securityadmin_tb1 values (1)
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_tb1)~~


UPDATE securityadmin_tb1 SET a = 2 where a = 1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_tb1)~~


DELETE FROM securityadmin_tb1 WHERE a = 1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_tb1)~~


TRUNCATE TABLE securityadmin_tb1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_tb1)~~


select * from securityadmin_tb1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_tb1)~~


select * from securityadmin_v1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for view securityadmin_v1)~~


select securityadmin_func1()
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for function securityadmin_func1)~~


exec securityadmin_proc1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for procedure securityadmin_proc1)~~


Enable trigger securityadmin_tggr1 on securityadmin_tb1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of table securityadmin_tb1)~~


Disable trigger securityadmin_tggr1 on securityadmin_tb1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of table securityadmin_tb1)~~


-- grant on objects permission denied
Grant select on securityadmin_tb1 to no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_tb1)~~


Grant update on securityadmin_v1 to no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_v1)~~


Grant update on securityadmin_v1 to no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_v1)~~


Grant exec on securityadmin_func1 to no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for function securityadmin_func1)~~


Grant exec on securityadmin_proc1 to no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for function securityadmin_proc1)~~


-- Revoke on objects permission denied
Revoke select on securityadmin_tb1 from no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_tb1)~~


Revoke update on securityadmin_v1 from no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_v1)~~


Revoke update on securityadmin_v1 from no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_v1)~~


Revoke exec on securityadmin_func1 from no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for function securityadmin_func1)~~


Revoke exec on securityadmin_proc1 from no_securityadmin_user1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for function securityadmin_proc1)~~


-- grant on schema
-- permission denied
grant select on securityadmin_v1 to no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_v1)~~

grant select on dbo.securityadmin_v1 to no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_v1)~~

grant execute on securityadmin_proc1 to no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for function securityadmin_proc1)~~

grant execute on dbo.securityadmin_proc1 to no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for function securityadmin_proc1)~~


-- revoke on schema
-- permission denied
revoke select on securityadmin_v1 from no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_v1)~~

revoke select on dbo.securityadmin_v1 from no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table securityadmin_v1)~~

revoke execute on securityadmin_proc1 from no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for function securityadmin_proc1)~~

revoke execute on dbo.securityadmin_proc1 from no_securityadmin_user1;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for function securityadmin_proc1)~~


-- drop object permission denied
drop user securityadmin_l2
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the user 'securityadmin_l2', because it does not exist or you do not have permission.)~~


drop role securityadmin_rol
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the role 'securityadmin_rol', because it does not exist or you do not have permission.)~~


drop schema securityadmin_scm1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of schema master_securityadmin_scm1)~~


drop view securityadmin_show_role_mem
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of view securityadmin_show_role_mem)~~


drop TRIGGER securityadmin_tggr1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of relation securityadmin_tb1)~~


drop table securityadmin_tb1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of table securityadmin_tb1)~~


drop view securityadmin_v1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of view securityadmin_v1)~~


drop function securityadmin_func1()
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of function securityadmin_func1)~~


drop procedure securityadmin_proc1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: must be owner of procedure securityadmin_proc1)~~


-- allowed drop login
drop login securityadmin_l2
go

-- terminate-tsql-conn user=securityadmin_login1 password=123


-- tsql database=securityadmin_db1
-- securityadmin login should not get mapped to dbo if no user exist, it should disconnect
drop user securityadmin_user1
go

-- terminate-tsql-conn database=securityadmin_db1

-- tsql user=securityadmin_login1 password=123
-- it should disconnect
use securityadmin_db1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The server principal "securityadmin_login1" is not able to access the database "securityadmin_db1" under the current security context)~~


-- tsql
-- Case 3 - alter server role other than securityadmin and sysadmin should give unsupported
Alter server role false_role add member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Only fixed server role is supported in ALTER SERVER ROLE statement)~~


Alter server role serveradmin add member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Fixed server role 'serveradmin' is currently not supported in Babelfish)~~


Alter server role setupadmin add member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Fixed server role 'setupadmin' is currently not supported in Babelfish)~~


Alter server role processadmin add member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Fixed server role 'processadmin' is currently not supported in Babelfish)~~


Alter server role diskadmin add member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Fixed server role 'diskadmin' is currently not supported in Babelfish)~~


Alter server role bulkadmin add member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Fixed server role 'bulkadmin' is currently not supported in Babelfish)~~


Alter server role false_role drop member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Only fixed server role is supported in ALTER SERVER ROLE statement)~~


Alter server role serveradmin drop member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Fixed server role 'serveradmin' is currently not supported in Babelfish)~~


Alter server role setupadmin drop member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Fixed server role 'setupadmin' is currently not supported in Babelfish)~~


Alter server role processadmin drop member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Fixed server role 'processadmin' is currently not supported in Babelfish)~~


Alter server role diskadmin drop member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Fixed server role 'diskadmin' is currently not supported in Babelfish)~~


Alter server role bulkadmin drop member no_securityadmin_login1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Fixed server role 'bulkadmin' is currently not supported in Babelfish)~~


-- terminate-tsql-conn user=securityadmin_login1 password=123

-- tsql
-- Case 4 - check unintended/unauthorized use of securityadmin
CREATE LOGIN securityadmin_restrict_new_login WITH password = '12345678';
go

ALTER SERVER ROLE sysadmin ADD MEMBER securityadmin_restrict_new_login;
GO

select * from securityadmin_show_role_mem where MemberPrincipalName like 'jdbc_user' or MemberPrincipalName like '%securityadmin_%'
go
~~START~~
varchar#!#varchar
sysadmin#!#jdbc_user
securityadmin#!#securityadmin_login1
sysadmin#!#securityadmin_restrict_new_login
~~END~~


-- terminate-tsql-conn

-- tsql user=securityadmin_restrict_new_login password=12345678
select * from securityadmin_show_role_mem where MemberPrincipalName like 'jdbc_user' or MemberPrincipalName like '%securityadmin_%'
go
~~START~~
varchar#!#varchar
sysadmin#!#jdbc_user
securityadmin#!#securityadmin_login1
sysadmin#!#securityadmin_restrict_new_login
~~END~~


select bbf_is_member_of_role_nosuper(suser_id(), suser_id('securityadmin'))
go
~~START~~
bit
0
~~END~~


select bbf_is_member_of_role_nosuper(suser_id(), suser_id('sysadmin'))
go
~~START~~
bit
1
~~END~~


select is_srvrolemember ('sysadmin')
go
~~START~~
int
1
~~END~~


select is_srvrolemember ('securityadmin')
go
~~START~~
int
1
~~END~~


select current_user, db_name()
go
~~START~~
varchar#!#nvarchar
dbo#!#master
~~END~~


CREATE ROLE securityadmin_restrictions_role;
GO


-- a tsql login should not be able to drop securityadmin explicitly from tsql port
-- should be denied
ALTER ROLE securityadmin_restrictions_role ADD MEMBER securityadmin;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "master_securityadmin" does not exist)~~


DROP LOGIN securityadmin;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the login 'securityadmin', because it does not exist or you do not have permission.)~~


DROP ROLE securityadmin_restrictions_role;
GO

-- terminate-tsql-conn user=securityadmin_restrict_new_login password=12345678

-- psql
create role securityadmin_restrict_new_pg_role
go

-- psql user=securityadmin_restrict_new_login password=12345678
-- a tsql login should not be able to alter/grant/drop securityadmin from pg port
ALTER ROLE securityadmin NOCREATEROLE;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


ALTER ROLE securityadmin WITH PASSWORD '12345678';
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


ALTER ROLE securityadmin VALID UNTIL 'infinity';
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


ALTER ROLE securityadmin WITH CONNECTION LIMIT 1;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


GRANT securityadmin TO securityadmin_restrict_new_login;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


GRANT securityadmin TO securityadmin_restrict_new_pg_role
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


GRANT sysadmin TO securityadmin
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


GRANT securityadmin TO securityadmin
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


GRANT securityadmin_restrict_new_login TO securityadmin;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


REVOKE securityadmin FROM master_dbo;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


REVOKE master_dbo FROM securityadmin;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


DROP ROLE securityadmin;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be dropped or altered outside of a Babelfish session
    Server SQLState: 42501)~~


SET SESSION AUTHORIZATION securityadmin;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: permission denied to set session authorization
    Server SQLState: 42501)~~


SET ROLE securityadmin;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: permission denied to set role "securityadmin"
    Server SQLState: 42501)~~


-- try granting object ownership to securityadmin
ALTER schema master_securityadmin_scm1 owner to securityadmin;
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: must be able to SET ROLE "securityadmin"
    Server SQLState: 42501)~~


ALTER table master_dbo.securityadmin_tb1 owner to securityadmin;
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: must be able to SET ROLE "securityadmin"
    Server SQLState: 42501)~~


ALTER procedure master_dbo.securityadmin_proc1 owner to securityadmin;
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: must be able to SET ROLE "securityadmin"
    Server SQLState: 42501)~~


ALTER function master_dbo.securityadmin_func1 owner to securityadmin;
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: must be able to SET ROLE "securityadmin"
    Server SQLState: 42501)~~


-- psql
-- drop role
drop role securityadmin_restrict_new_pg_role
go

-- normal PG user
CREATE USER securityadmin_restrictions_pg_user WITH LOGIN CREATEROLE PASSWORD '12345678' inherit;
go

-- psql user=securityadmin_restrictions_pg_user password=12345678
-- a normal psql user should not be able to alter/grant/drop securityadmin from pg port
ALTER ROLE securityadmin NOCREATEROLE;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


-- Altering a role by an underprivileged login should be restricted
alter user securityadmin_restrict_new_login with password '123'
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: permission denied to alter role
  Detail: To change another role's password, the current user must have the CREATEROLE attribute and the ADMIN option on the role.
    Server SQLState: 42501)~~


ALTER ROLE securityadmin WITH PASSWORD '12345678';
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


ALTER ROLE securityadmin VALID UNTIL 'infinity';
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


ALTER ROLE securityadmin WITH CONNECTION LIMIT 1;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


GRANT securityadmin TO securityadmin_restrict_new_login;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


GRANT securityadmin_restrict_new_login TO securityadmin;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


REVOKE securityadmin FROM master_dbo;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


REVOKE sysadmin FROM securityadmin
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


REVOKE securityadmin FROM securityadmin
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


REVOKE master_dbo FROM securityadmin;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be altered outside of a Babelfish session
    Server SQLState: 42501)~~


DROP ROLE securityadmin;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Babelfish-created logins/users/roles cannot be dropped or altered outside of a Babelfish session
    Server SQLState: 42501)~~


SET SESSION AUTHORIZATION securityadmin;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: permission denied to set session authorization
    Server SQLState: 42501)~~


SET ROLE securityadmin;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: permission denied to set role "securityadmin"
    Server SQLState: 42501)~~


-- tsql
EXEC sp_dropserver 'server_4229', 'droplogins'
GO

EXEC sp_dropserver 'Accounts', 'droplogins'
GO

-- terminate-tsql-conn

-- psql
-- Drop extension only if not user mapping exists for bbf_server
-- Needed so that same test can be reused in upgrade in conjunction
-- with tests for OPENQUERY
DO
$$
BEGIN
IF NOT EXISTS (SELECT * FROM pg_user_mappings WHERE srvname = 'bbf_server') THEN
        SET client_min_messages = 'error';
        DROP EXTENSION tds_fdw CASCADE;
END IF;
END
$$
GO

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'securityadmin_restrict_new_login' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go
~~START~~
bool
t
~~END~~


DROP USER securityadmin_restrictions_pg_user;
GO

-- Wait to sync with another session
SELECT pg_sleep(1);
GO
~~START~~
void

~~END~~


-- tsql

ALTER SERVER ROLE sysadmin drop MEMBER securityadmin_restrict_new_login;
GO

DROP LOGIN securityadmin_restrict_new_login
GO
