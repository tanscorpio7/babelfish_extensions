-- simple vars
declare @i int
declare @j int
set @i = 10
set @j = @i + 10
select @i, @j
GO
~~START~~
int#!#int
10#!#20
~~END~~


declare @i int
declare @j int
select @i = 10, @j = @i + 10
select @i, @j
GO
~~START~~
int#!#int
10#!#20
~~END~~


declare @i int
declare @j int = 0;
select @i = 10, @j = @i + @j * 2
select @i, @j
GO
~~START~~
int#!#int
10#!#10
~~END~~


declare @i int
declare @j int
select @i = 10, @j = @i + 10
select @j += 10
select @i, @j
GO
~~START~~
int#!#int
10#!#30
~~END~~


-- should throw an error
declare @i int 
select @i = 0, @i += 2
select @i
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Babelfish does not support assignment to the same variable in SELECT. variable name: "@i")~~


declare @i int
select @i = 10, @i += 10
select @i
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Babelfish does not support assignment to the same variable in SELECT. variable name: "@i")~~


-- sub-expr
declare @i int
set @i = 10
select @i += (5 - 1)
select @i
GO
~~START~~
int
14
~~END~~


DECLARE @a int
select @a = (select ~cast('1' as int))
select @a
go
~~START~~
int
-2
~~END~~



DECLARE @Counter INT = 1;
DECLARE @MaxValue INT = 10;
WHILE @Counter <= @MaxValue
BEGIN
    DECLARE @IsEven BIT;
    
    IF @Counter % 2 = 0
        SET @IsEven = 1;
    ELSE
        SET @IsEven = 0;
    
    IF @IsEven = 1
        SELECT CAST(@Counter AS VARCHAR(2)) + ' is even';
    ELSE
        SELECT CAST(@Counter AS VARCHAR(2)) + ' is odd';
    
    SET @Counter = @Counter + 1;
END;
GO
~~START~~
varchar
1 is odd
~~END~~

~~START~~
varchar
2 is even
~~END~~

~~START~~
varchar
3 is odd
~~END~~

~~START~~
varchar
4 is even
~~END~~

~~START~~
varchar
5 is odd
~~END~~

~~START~~
varchar
6 is even
~~END~~

~~START~~
varchar
7 is odd
~~END~~

~~START~~
varchar
8 is even
~~END~~

~~START~~
varchar
9 is odd
~~END~~

~~START~~
varchar
10 is even
~~END~~


declare @a numeric (10, 4);
declare @b numeric (10, 4);
SET @a=100.41;
SET @b=200.82;
SELECT @a, @b
select @a+@b as r;
GO
~~START~~
numeric#!#numeric
100.4100#!#200.8200
~~END~~

~~START~~
numeric
301.2300
~~END~~


declare @a numeric;
declare @b numeric (10, 4);
SET @a=100.41;
SET @b=200.82;
SELECT @a, @b
select @a+@b as r;
GO
~~START~~
numeric#!#numeric
100#!#200.8200
~~END~~

~~START~~
numeric
300.8200
~~END~~


declare @a varbinary
set @a = cast('test_bin' as varbinary)
select @a
GO
~~START~~
varbinary
74
~~END~~


declare @a varbinary(max)
set @a = cast('test_bin' as varbinary)
select @a
GO
~~START~~
varbinary
746573745F62696E
~~END~~


declare @a varbinary(10)
set @a = cast('test_bin' as varbinary)
select @a
GO
~~START~~
varbinary
746573745F62696E
~~END~~


declare @a varbinary
declare @b varbinary
select @a = cast('test_bin' as varbinary), @b = @a
select @a, @b
GO
~~START~~
varbinary#!#varbinary
74#!#74
~~END~~


declare @a varbinary(max)
select @a = cast('test_bin' as varbinary)
select @a
GO
~~START~~
varbinary
746573745F62696E
~~END~~


DECLARE @a varchar
set @a = '12345678901234567890123456789012345';
SELECT LEN(@a), DATALENGTH(@a)
SELECT @a
GO
~~START~~
int#!#int
1#!#1
~~END~~

~~START~~
varchar
1
~~END~~


DECLARE @v varchar(20);
SELECT @v = NULL;
SELECT ISNUMERIC(@v), LEN(@v), DATALENGTH(@v)
GO
~~START~~
int#!#int#!#int
0#!#<NULL>#!#<NULL>
~~END~~


DECLARE @a varchar(max)
SELECT @a = '12345678901234567890123456789012345';
SELECT LEN(@a), DATALENGTH(@a)
SELECT @a
GO
~~START~~
int#!#int
35#!#35
~~END~~

~~START~~
varchar
12345678901234567890123456789012345
~~END~~


-- collate can not be used with local variables
DECLARE @v varchar(20) collate BBF_Unicode_CP1_CI_As = 'ci_as';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'collate' at line 2 and character position 23)~~


declare @source int;
declare @target sql_variant;
select @source = 1.0
select @target = cast(@source as varchar(10));
SELECT sql_variant_property(@target, 'basetype');
select @target
GO
~~START~~
sql_variant
varchar
~~END~~

~~START~~
sql_variant
1
~~END~~


declare @source int;
declare @target varchar(10);
select @source = 1.0
select cast(@source as varchar(10))
select @target = cast(@source as varchar(10));
select @target
GO
~~START~~
varchar
1
~~END~~

~~START~~
varchar
1
~~END~~


DECLARE @a pg_catalog.varchar
SELECT @a = '12345678901234567890123456789012345';
SELECT LEN(@a), DATALENGTH(@a)
SELECT @a
GO
~~START~~
int#!#int
35#!#35
~~END~~

~~START~~
varchar
12345678901234567890123456789012345
~~END~~


DECLARE @a pg_catalog.varchar(100)
SELECT @a = '12345678901234567890123456789012345';
SELECT LEN(@a), DATALENGTH(@a)
SELECT @a
GO
~~START~~
int#!#int
35#!#35
~~END~~

~~START~~
varchar
12345678901234567890123456789012345
~~END~~


DECLARE @a pg_catalog.varchar(10)
SELECT @a = '12345678901234567890123456789012345';
SELECT LEN(@a), DATALENGTH(@a)
SELECT @a
GO
~~START~~
int#!#int
10#!#10
~~END~~

~~START~~
varchar
1234567890
~~END~~


DECLARE @a varchar
SELECT @a = '12345678901234567890123456789012345';
SELECT LEN(@a), DATALENGTH(@a)
SELECT @a
GO
~~START~~
int#!#int
1#!#1
~~END~~

~~START~~
varchar
1
~~END~~


DECLARE @a varchar(100)
SELECT @a = '12345678901234567890123456789012345';
SELECT LEN(@a), DATALENGTH(@a)
SELECT @a
GO
~~START~~
int#!#int
35#!#35
~~END~~

~~START~~
varchar
12345678901234567890123456789012345
~~END~~


DECLARE @a varchar(10)
SELECT @a = '12345678901234567890123456789012345';
SELECT LEN(@a), DATALENGTH(@a)
SELECT @a
GO
~~START~~
int#!#int
10#!#10
~~END~~

~~START~~
varchar
1234567890
~~END~~


DECLARE @a int
set @a = 0
select @a ^= 1
select @a
go
~~START~~
int
1
~~END~~


DECLARE @a int
set @a = 0
select @a += ~@a
select @a
go
~~START~~
int
-1
~~END~~


SET QUOTED_IDENTIFIER OFF
GO

-- quoted identifiers
declare @v varchar(20) = "ABC", @v2 varchar(20)="XYZ";
select @v += "a""b''c'd", @v2 += "x""y''z";
select @v, @v2
GO
~~START~~
varchar#!#varchar
ABCa"b''c'd#!#XYZx"y''z
~~END~~


declare @v varchar(20) = "ABC", @v2 varchar(20)="XYZ";
select @v += "a""b''c'd", @v2 += @v + "x""y''z";
select @v, @v2
GO
~~START~~
varchar#!#varchar
ABCa"b''c'd#!#XYZABCa"b''c'dx"y''z
~~END~~


declare @v varchar(20) = "ABC", @v2 varchar(20)="XYZ";
select @v += reverse("a""b''c'd"), @v2 += @v + "x""y''z";
select @v, @v2
GO
~~START~~
varchar#!#varchar
ABCd'c''b"a#!#XYZABCd'c''b"ax"y''z
~~END~~


declare @v varchar(20) = "ABC", @v2 varchar(20)="XYZ";
select @v += reverse("a""b''c'd"), @v2 += @v + reverse("x""y''z");
select @v, @v2
GO
~~START~~
varchar#!#varchar
ABCd'c''b"a#!#XYZABCd'c''b"az''y"x
~~END~~


declare @v varchar(20) = "ABC", @v2 varchar(20)="XYZ";
select @v += reverse("a""b''c'd"), @v2 += REVERSE( @v + reverse("x""y''z"));
select @v, @v2
GO
~~START~~
varchar#!#varchar
ABCd'c''b"a#!#XYZx"y''za"b''c'dCBA
~~END~~


SET QUOTED_IDENTIFIER ON
GO

declare @v varchar(20) = 'ABC', @v2 varchar(20)='XYZ';
select @v += 'abc', @v2 += 'xyz';
select @v, @v2
GO
~~START~~
varchar#!#varchar
ABCabc#!#XYZxyz
~~END~~


declare @a int = 1, @b int = 2;
select @a = 2, @b = @a + 2
select @a, @b
GO
~~START~~
int#!#int
2#!#4
~~END~~


declare @a int = 1, @b int = 2;
select @a += 2, @b -= @a + 2
select @a, @b
GO
~~START~~
int#!#int
3#!#-3
~~END~~


-- xml methods
DECLARE @a bit = 1
DECLARE @xml XML = '<artists> <artist name="John Doe"/> <artist name="Edward Poe"/> <artist name="Mark The Great"/> </artists>'
SELECT @a |= @xml.exist('/artists/artist/@name')
select @a
GO
~~START~~
bit
1
~~END~~


DECLARE @a bit = 1
DECLARE @xml XML;
SELECT @xml  = '<artists> <artist name="John Doe"/> <artist name="Edward Poe"/> <artist name="Mark The Great"/> </artists>', @a |= @xml.exist('/artists/artist/@name')
select @a
GO
~~START~~
bit
1
~~END~~


-- test all kind of udts
create type udt from NCHAR
go

declare @a udt
select @a = 'anc'
select @a
GO
~~START~~
nchar
a
~~END~~


DROP type udt 
GO

create type varchar_max from varchar(max)
GO

DECLARE @a varchar_max
SELECT @a = '12345678901234567890123456789012345';
SELECT LEN(@a), DATALENGTH(@a)
SELECT @a
GO
~~START~~
int#!#int
35#!#35
~~END~~

~~START~~
varchar
12345678901234567890123456789012345
~~END~~


DROP type varchar_max
GO

create type num_def from numeric
GO

declare @a numeric;
declare @b num_def;
SET @a=100.41;
SET @b=200.82;
SELECT @a, @b
select @a+@b as r;
GO
~~START~~
numeric#!#numeric
100#!#201
~~END~~

~~START~~
numeric
301
~~END~~


drop type num_def
GO

/*
 * select/update test
 */
create table local_var_tst (id int) 
GO

TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
insert into local_var_tst values (6)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


-- txn does not affect local variables
begin tran
declare @i int 
update local_var_tst set id = 5, @i = id * 5
select @i
ROLLBACK tran
select @i
GO
~~ROW COUNT: 3~~

~~START~~
int
25
~~END~~

~~START~~
int
25
~~END~~


select * from local_var_tst;
GO
~~START~~
int
1
2
6
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


-- should return 4
declare @i int 
select @i = 1
select @i = id * 2 from local_var_tst where id = @i
select @i
GO
~~START~~
int
2
~~END~~


declare @i int 
select @i = 1
select @i = @i + id * 2 from local_var_tst
select @i
GO
~~START~~
int
7
~~END~~


declare @i int 
select @i = 1
select @i = id * 2 + @i from local_var_tst
select @i
GO
~~START~~
int
7
~~END~~


declare @i int 
select @i = 1
select @i += id * 2 from local_var_tst
select @i
GO
~~START~~
int
7
~~END~~


-- 3 parts name 
declare @i int 
select @i = 1
select @i += master.dbo.local_var_tst.id * 2 from local_var_tst
select @i
GO
~~START~~
int
7
~~END~~


-- local var name same as column
declare @id int = 1
select @id += master.dbo.local_var_tst.id * 2 from local_var_tst
select @id
GO
~~START~~
int
7
~~END~~


-- should throw an error
declare @i int
declare @j int
set @i = 10
set @j = 0;
select @i += (select @j = @j + id from local_var_tst)
select @i
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: variable assignment can be used only in top-level SELECT)~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


DECLARE @ans INT
SELECT @ans = AVG(id) FROM local_var_tst
select @ans
GO
~~START~~
int
1
~~END~~


-- local variable inside functions
CREATE FUNCTION var_inside_func()
RETURNS INT AS
BEGIN
    DECLARE @ans INT
    SELECT @ans = AVG(id) FROM local_var_tst
    RETURN @ans
END
GO

select var_inside_func();
GO
~~START~~
int
1
~~END~~


DROP FUNCTION var_inside_func();
GO

-- show throw an error
CREATE FUNCTION var_inside_func()
RETURNS @tab table (a int) as
BEGIN
    DECLARE @ans INT
    SELECT @ans += id from local_var_tst
    select @ans
END
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: SELECT statement returning result to a client cannot be used in a function)~~


drop function if exists var_inside_func
go

CREATE FUNCTION var_inside_func()
RETURNS INT AS
BEGIN
    DECLARE @ans INT
    SELECT @ans += id FROM local_var_tst
    RETURN @ans
END
GO

select var_inside_func()
go
~~START~~
int
<NULL>
~~END~~


drop function if exists var_inside_func
go

CREATE FUNCTION var_inside_func(@def int)
RETURNS INT AS
BEGIN
    DECLARE @ans INT;
    select @ans = @def;
    SELECT @ans += id FROM local_var_tst
    RETURN @ans
END
GO

select var_inside_func(0)
go
~~START~~
int
3
~~END~~


declare @def int = 1;
select var_inside_func(@def)
go
~~START~~
int
4
~~END~~


drop function if exists var_inside_func
go

CREATE FUNCTION var_inside_func()
RETURNS INT AS
BEGIN
    DECLARE @ans INT
    select @ans = 0
    SELECT @ans += id + @ans FROM local_var_tst
    RETURN @ans
END
GO

select var_inside_func()
go
~~START~~
int
4
~~END~~


drop function if exists var_inside_func
go

-- variable with procedure
CREATE PROCEDURE var_with_procedure (@a numeric(10,4) OUTPUT) AS
BEGIN
  SET @a=100.41;
  select @a as a;
END;
GO

exec var_with_procedure 2.000;
GO
~~START~~
numeric
100.4100
~~END~~


-- value of @out should remain 2.000
declare @out numeric(10,4);
set @out = 2.000;
exec var_with_procedure 2.000;
select @out
GO
~~START~~
numeric
100.4100
~~END~~

~~START~~
numeric
2.0000
~~END~~


drop procedure var_with_procedure;
GO

CREATE PROCEDURE var_with_procedure_1 (@a numeric(10,4) OUTPUT, @b numeric(10,4) OUTPUT) AS
BEGIN
  SET @a=100.41;
  SET @b=200.82;
  select @a+@b as r;
END;
GO

EXEC var_with_procedure_1 2.000, 3.000;
GO
~~START~~
numeric
301.2300
~~END~~


-- value of @a should be 100
DECLARE @a INT;
EXEC var_with_procedure_1 @a OUT, 3.000;
SELECT @a;
GO
~~START~~
numeric
301.2300
~~END~~

~~START~~
int
100
~~END~~


drop procedure var_with_procedure_1;
GO

CREATE PROCEDURE var_with_procedure_2
AS
BEGIN
  declare @a int
  declare @b int
  set @a = 1
  return
  select @b=@a+1
END
GO

exec var_with_procedure_2
GO

DROP PROCEDURE var_with_procedure_2
GO

-- insert testing with local variables
truncate table dbo.local_var_tst
go

-- should throw an error
declare @a int = 1
insert into local_var_tst select @a = @a + 1
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: variable assignment can be used only in top-level SELECT)~~


-- syntax error
declare @a int = 1
insert into local_var_tst values (@a = @a + 1)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '=' at line 3 and character position 37)~~


declare @a int = 1
insert into local_var_tst values (@a + 1)
GO
~~ROW COUNT: 1~~


-- output clause with insert
declare @a int = 1
declare @mytbl table(a int)
insert local_var_tst output inserted.id into @mytbl values (@a + 1) 
select * from @mytbl
GO
~~ROW COUNT: 1~~

~~START~~
int
2
~~END~~


-- output clause with delete
declare @a int = 1
declare @mytbl table(a int)
delete local_var_tst output deleted.id into @mytbl where id = @a + 1
select * from @mytbl
GO
~~ROW COUNT: 2~~

~~START~~
int
2
2
~~END~~


drop table dbo.local_var_tst
go

create table local_var_tst_1 (a int, b int)
GO

insert into local_var_tst_1 values (1,3), (2, 4)
go
~~ROW COUNT: 2~~



-- select test with multi-variable assignment
declare @a int = 0
declare @b int = 0
select @a += a, @b += b from local_var_tst_1
select @a, @b
go
~~START~~
int#!#int
3#!#7
~~END~~


declare @a int = 0
declare @b int = 0
select @a += a, @b += @a + b from local_var_tst_1
select @a, @b
go
~~START~~
int#!#int
3#!#11
~~END~~


declare @a int = 0
declare @b int = 0
select @a += a, @b += @a + ~b from local_var_tst_1
select @a, @b
go
~~START~~
int#!#int
3#!#-5
~~END~~


drop table local_var_tst_1
go

create table local_var_str_tst (id varchar(100))
GO

insert into local_var_str_tst values ('abc'), (' '), ('def')
GO
~~ROW COUNT: 3~~


declare @i varchar(1000)
set @i = ''
select @i = @i + id from local_var_str_tst
select @i
go
~~START~~
varchar
abc def
~~END~~


declare @i varchar(1000)
set @i = ''
select @i = id + @i from local_var_str_tst
select @i
go
~~START~~
varchar
def abc
~~END~~


declare @i varchar(1000)
set @i = ''
select @i += id from local_var_str_tst
select @i
go
~~START~~
varchar
abc def
~~END~~


declare @i varchar(1000)
set @i = ''
select @i = reverse(@i + 'id') from local_var_str_tst
select @i
go
~~START~~
varchar
didiid
~~END~~


declare @i varchar(1000)
set @i = ''
select @i += reverse(id) from local_var_str_tst
select @i
go
~~START~~
varchar
cba fed
~~END~~


declare @i varchar(1000)
set @i = 'abc'
select @i = reverse(@i)
select @i
go
~~START~~
varchar
cba
~~END~~


-- function call like trim, ltrim, etc will be rewritten by ANTLR
declare @i varchar(1000)
set @i = ' '
select @i += id from local_var_str_tst
select len(@i), @i
select @i = trim(@i)
select len(@i), @i
go
~~START~~
int#!#varchar
8#!# abc def
~~END~~

~~START~~
int#!#varchar
7#!#abc def
~~END~~


drop table local_var_str_tst;
go

-- $PARTITION is rewritten by ANTLR
CREATE PARTITION FUNCTION RangePF1 ( INT )  
AS RANGE RIGHT FOR VALUES (10, 100, 1000) ;  
GO

declare @res int = -1;
SELECT @res = $PARTITION.RangePF1 (10);
select @res
select 1 where @res = $PARTITION.RangePF1 (10);
SELECT @res = $PARTITION.RangePF1 (@res);
select @res
GO
~~START~~
int
2
~~END~~

~~START~~
int
1
~~END~~

~~START~~
int
1
~~END~~


DROP PARTITION FUNCTION RangePF1 
GO

CREATE SEQUENCE CountBy1  
    START WITH 1  
    INCREMENT BY 1 ;
GO

-- NEXT VALUE FOR gets re-written by ANTLR
DECLARE @myvar1 BIGINT = NEXT VALUE FOR CountBy1 ;
DECLARE @myvar2 BIGINT ;  
DECLARE @myvar3 BIGINT ;  
select @myvar2 = NEXT VALUE FOR CountBy1 ;  
SELECT @myvar3 = NEXT VALUE FOR CountBy1 ;  
SELECT @myvar1 AS myvar1, @myvar2 AS myvar2, @myvar3 AS myvar3 ;  
GO
~~START~~
bigint#!#bigint#!#bigint
1#!#2#!#3
~~END~~


DROP SEQUENCE CountBy1
GO

-- any @@ is also re-written by ANTLR
declare @pid int = 0
select @pid += @@spid
select 1 where @pid = @@spid
go
~~START~~
int
1
~~END~~


-- float point notation also gets rewritten by ANTLR e.g., 2.1E, -.2e+, -2.e-
declare @a float = 0
select @a = 2.1E
select @a
select @a = -.2e+
select @a 
select @a = -2.e-
select @a
go
~~START~~
float
2.1
~~END~~

~~START~~
float
-0.2
~~END~~

~~START~~
float
-2.0
~~END~~


-- variables only in select target list shows dynamic behavior
create table local_var_tst (id int) 
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
insert into local_var_tst values (1)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i int = 1
declare @j int = 0
select @j += id, @i = id + 1  from local_var_tst where id = @i
select @i, @j
go
~~START~~
int#!#int
2#!#2
~~END~~


declare @i int = 1
select @i = id * 2 from local_var_tst where id = @i
select @i
GO
~~START~~
int
2
~~END~~


select set_config('babelfishpg_tsql.explain_timing', 'off', false);
GO
~~START~~
text
off
~~END~~


select set_config('babelfishpg_tsql.explain_summary', 'off', false);
GO
~~START~~
text
off
~~END~~


set babelfish_statistics profile On;
GO

declare @i int = 1
declare @j int = 0
select @j += id, @i = id + 1  from local_var_tst where id = @i
select @i, @j
go
~~START~~
text
Query Text: select       sys.pltsql_assign_var(3, @j + cast((id) as int)),      sys.pltsql_assign_var(2, cast((id + 1) as int))  from local_var_tst where id = "@i"
Seq Scan on local_var_tst  (cost=0.00..42.01 rows=13 width=8) (actual rows=2 loops=1)
  Filter: (id = 1)
  Rows Removed by Filter: 1
~~END~~

~~START~~
int#!#int
2#!#2
~~END~~

~~START~~
text
Query Text: select "@i", "@j"
Gather  (cost=0.00..0.01 rows=1 width=8) (actual rows=1 loops=1)
  Workers Planned: 1
  Workers Launched: 1
  Single Copy: true
  ->  Result  (cost=0.00..0.01 rows=1 width=8) (actual rows=1 loops=1)
~~END~~


declare @i int = 1
select @i = @i * 2 from local_var_tst where id = @i
select @i
GO
~~START~~
text
Query Text: select      sys.pltsql_assign_var(2, cast((@i * 2) as int)) from local_var_tst where id = "@i"
Seq Scan on local_var_tst  (cost=0.00..41.94 rows=13 width=4) (actual rows=2 loops=1)
  Filter: (id = 1)
  Rows Removed by Filter: 1
~~END~~

~~START~~
int
4
~~END~~

~~START~~
text
Query Text: select "@i"
Gather  (cost=0.00..0.01 rows=1 width=4) (actual rows=1 loops=1)
  Workers Planned: 1
  Workers Launched: 1
  Single Copy: true
  ->  Result  (cost=0.00..0.01 rows=1 width=4) (actual rows=1 loops=1)
~~END~~


set babelfish_statistics profile OFF
GO

select set_config('babelfishpg_tsql.explain_timing', 'on', false);
GO
~~START~~
text
on
~~END~~


select set_config('babelfishpg_tsql.explain_summary', 'on', false);
GO
~~START~~
text
on
~~END~~


-- declared variable name with length > 63
declare @abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr int = 1
select @abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr += 1
select @abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr
GO
~~START~~
int
2
~~END~~


-- variable names starting with @@
declare @@a int = 1;
select @@a = @@a + 1
select @@a 
GO
~~START~~
int
2
~~END~~


declare @@a int = 1;
select @@a += 1
select @@a 
GO
~~START~~
int
2
~~END~~


declare @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr int = 1
select @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr = @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr + 1
select @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr
GO
~~START~~
int
2
~~END~~


truncate table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
insert into local_var_tst values (1)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr int = 1
select @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr = @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr + id from local_var_tst
select @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr
GO
~~START~~
int
5
~~END~~


declare @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr int = 1
select @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr = id + @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr from local_var_tst
select @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr
GO
~~START~~
int
5
~~END~~


declare @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr int = 1
select @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr += id from local_var_tst
select @@abcbjbnjfbjrnfjrnfkrelnfksnrfenjkfrfrfrfrfrfnknslkrnflkernklfnkmklfr
GO
~~START~~
int
5
~~END~~


truncate table local_var_tst
GO

insert into local_var_tst values (1)
GO
~~ROW COUNT: 1~~


select set_config('babelfishpg_tsql.explain_timing', 'off', false);
GO
~~START~~
text
off
~~END~~


select set_config('babelfishpg_tsql.explain_summary', 'off', false);
GO
~~START~~
text
off
~~END~~


set babelfish_statistics profile On;
GO

-- error while evaluating const expression
declare @a int = 1;
select @a = 1 / 0 from local_var_tst
select * from local_var_tst where id = @a
GO
~~ERROR (Code: 8134)~~

~~ERROR (Message: division by zero)~~

~~START~~
int
1
~~END~~

~~START~~
text
Query Text: select * from local_var_tst where id = "@a"
Gather  (cost=0.00..20.28 rows=13 width=4) (actual rows=1 loops=1)
  Workers Planned: 3
  Workers Launched: 3
  ->  Parallel Seq Scan on local_var_tst  (cost=0.00..20.28 rows=4 width=4) (actual rows=0 loops=4)
        Filter: (id = 1)
~~END~~


set babelfish_statistics profile OFF
GO

select set_config('babelfishpg_tsql.explain_timing', 'on', false);
GO
~~START~~
text
on
~~END~~


select set_config('babelfishpg_tsql.explain_summary', 'on', false);
GO
~~START~~
text
on
~~END~~


drop table local_var_tst
GO

create table ident_tst(id_num INT IDENTITY(1, 1), b varchar(10))
GO

insert into ident_tst values ('test')
GO
~~ROW COUNT: 1~~


declare @a int = 1
select @a = @@IDENTITY
select @a
select 1 where @a = @@IDENTITY
GO
~~START~~
int
1
~~END~~

~~START~~
int
1
~~END~~


-- additional testing for update with dynamic variables
GO

create table local_var_tst (id int) 
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~



set QUOTED_IDENTIFIER on
GO

declare @i varchar(100)
update local_var_tst set id = id + 10, @i = cast("xmax" as varchar(100))
select 1 where @i IS NOT NULL
GO
~~ROW COUNT: 2~~

~~START~~
int
1
~~END~~


set QUOTED_IDENTIFIER off
GO

select * from local_var_tst order by id;
GO
~~START~~
int
11
12
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


-- long identifier with update
declare @incnjkdncjknxdjnkxnknvjkdfjvbdfbvjbdfhjbvjdbfvkjbdnjnlkanjfnvjnjfdlsahdnuejncdiebnjcnjksndjnjxndjcx int
update local_var_tst set id =10, @incnjkdncjknxdjnkxnknvjkdfjvbdfbvjbdfhjbvjdbfvkjbdnjnlkanjfnvjnjfdlsahdnuejncdiebnjcnjksndjnjxndjcx = id
select @incnjkdncjknxdjnkxnknvjkdfjvbdfbvjbdfhjbvjdbfvkjbdnjnlkanjfnvjnjfdlsahdnuejncdiebnjcnjksndjnjxndjcx
GO
~~ROW COUNT: 2~~

~~START~~
int
10
~~END~~


select * from local_var_tst
GO
~~START~~
int
10
10
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


-- @@ variables
declare @@incnjkdnc int
update local_var_tst set id =10, @@incnjkdnc = id
select @@incnjkdnc
GO
~~ROW COUNT: 2~~

~~START~~
int
10
~~END~~


select * from local_var_tst
GO
~~START~~
int
10
10
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i int 
update local_var_tst set id = id + 2, @i = id * 5;
select @i
GO
~~ROW COUNT: 2~~

~~START~~
int
20
~~END~~


select * from local_var_tst order by id;
GO
~~START~~
int
3
4
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i int, @j int;
update local_var_tst set id =10, @i = case when @j =0 then 1 else 0 end;
select @i, @j
go
~~ROW COUNT: 2~~

~~START~~
int#!#int
0#!#<NULL>
~~END~~


select * from local_var_tst;
GO
~~START~~
int
10
10
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i int, @j int;
update local_var_tst set id = 10, @j = id, @i = case when @j =0 then 1 else 0 end;
select @i, @j
go
~~ROW COUNT: 2~~

~~START~~
int#!#int
0#!#10
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i int, @j int = 0
update local_var_tst set id =10, @i = charindex('a','a',@j)
select @i
GO
~~ROW COUNT: 2~~

~~START~~
int
1
~~END~~


select * from local_var_tst;
GO
~~START~~
int
10
10
~~END~~


declare @i int, @j int = 0
update local_var_tst set id =10, @i = charindex('a','a',@j);
select @i
GO
~~ROW COUNT: 2~~

~~START~~
int
1
~~END~~


select * from local_var_tst;
GO
~~START~~
int
10
10
~~END~~


declare @i int, @j int;
update local_var_tst set id = 10, @j = id, @i = @j * 2
select @i, @j
go
~~ROW COUNT: 2~~

~~START~~
int#!#int
20#!#10
~~END~~


select * from local_var_tst;
GO
~~START~~
int
10
10
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i int = 1
update local_var_tst set id = @i, @i = id * 2 where id = @i
select @i
GO
~~ROW COUNT: 1~~

~~START~~
int
2
~~END~~


select * from local_var_tst
go
~~START~~
int
2
1
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i int = 1
update local_var_tst set id = @i, @i += id * 2 where id = @i
select @i
GO
~~ROW COUNT: 1~~

~~START~~
int
3
~~END~~


select * from local_var_tst
go
~~START~~
int
2
1
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i VARCHAR(200) = ''
update local_var_tst set id = id * 2, @i = @i + cast(id as varchar(20))
select @i
GO
~~ROW COUNT: 2~~

~~START~~
varchar
24
~~END~~


select * from local_var_tst order by id
go
~~START~~
int
2
4
~~END~~


-- @i should be NULL as no row passes the qual condition
declare @i int 
update local_var_tst set id =10, @i = id * 5 where id = 1
select @i
GO
~~START~~
int
<NULL>
~~END~~


select * from local_var_tst order by id
go
~~START~~
int
2
4
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~



declare @i int = 1
update local_var_tst set id = @i, @i = id * 5 where id = @i
select @i
GO
~~ROW COUNT: 1~~

~~START~~
int
5
~~END~~


select * from local_var_tst order by id
go
~~START~~
int
1
2
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i int 
set @i = 0
update local_var_tst set id = @i, @i = id * 5
select @i
GO
~~ROW COUNT: 2~~

~~START~~
int
0
~~END~~


select * from local_var_tst;
GO
~~START~~
int
0
0
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


-- trim is re-written by antlr
declare @i varchar(200) 
select @i = ''
update local_var_tst set id = @i, @i = TRIM(@i + cast(id as varchar(10)));
select @i
GO
~~ROW COUNT: 2~~

~~START~~
varchar
00
~~END~~


select * from local_var_tst;
GO
~~START~~
int
0
0
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~



-- variables in the where clause should be treated as const
declare @i int = 1;
update local_var_tst set id = @i * 100, @i = id * 2 where id = @i
select @i
GO
~~ROW COUNT: 1~~

~~START~~
int
200
~~END~~


select * from local_var_tst order by id;
GO
~~START~~
int
2
100
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i int = 1;
update local_var_tst set id = @i * 100, @i = @@IDENTITY
select @i
select 1 where @i = @@IDENTITY
GO
~~ROW COUNT: 2~~

~~START~~
int
1
~~END~~

~~START~~
int
1
~~END~~


select * from local_var_tst
GO
~~START~~
int
100
100
~~END~~


TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


CREATE PARTITION FUNCTION RangePF1 ( INT )  
AS RANGE RIGHT FOR VALUES (10, 100, 1000) ;  
GO

declare @i int = -1;
SELECT @i = $PARTITION.RangePF1 (10);
select @i
update local_var_tst set id = @i, @i = $PARTITION.RangePF1 (10);
select @i
GO
~~START~~
int
2
~~END~~

~~ROW COUNT: 2~~

~~START~~
int
2
~~END~~


select * from local_var_tst;
GO
~~START~~
int
2
2
~~END~~


DROP PARTITION FUNCTION RangePF1 
GO

CREATE PROCEDURE var_with_procedure (@i int, @a numeric(10,4) OUTPUT) AS
BEGIN
  update local_var_tst set id = @i * 2, @a = id * 5 where id = @i
  select @a
END;
GO

TRUNCATE table local_var_tst
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @input int = 1, @res int;
exec var_with_procedure @input, @res
select @res
GO
~~ROW COUNT: 1~~

~~START~~
numeric
10.0000
~~END~~

~~START~~
int
<NULL>
~~END~~


select * from local_var_tst
go
~~START~~
int
2
2
~~END~~


declare @input int = 2, @a int;
exec var_with_procedure @input, @a
select @a
GO
~~ROW COUNT: 2~~

~~START~~
numeric
20.0000
~~END~~

~~START~~
int
<NULL>
~~END~~


DROP PROCEDURE var_with_procedure;
GO

DROP TABLE local_var_tst
GO

create table local_var_tst_1 (id int) 
GO

insert into local_var_tst_1 values (1)
insert into local_var_tst_1 values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


create unique index idx_local_var_tst_1 on local_var_tst_1(id)
GO


SELECT set_config('enable_indexscan', '1', false);
SELECT set_config('enable_indexonlyscan', '0', false);
SELECT set_config('enable_seqscan', '0', false);
GO
~~START~~
text
on
~~END~~

~~START~~
text
off
~~END~~

~~START~~
text
off
~~END~~


declare @i int = 1
update local_var_tst_1 set id = @i, @i = id * 5 where id = 1
select @i
GO
~~ROW COUNT: 1~~

~~START~~
int
5
~~END~~


declare @i int = 1
update local_var_tst_1 set id = 10 output deleted.id where id = 1
select @i
GO
~~START~~
int
1
~~END~~

~~START~~
int
1
~~END~~


SELECT set_config('enable_indexscan', '1', false);
SELECT set_config('enable_indexonlyscan', '1', false);
SELECT set_config('enable_seqscan', '1', false);
GO
~~START~~
text
on
~~END~~

~~START~~
text
on
~~END~~

~~START~~
text
on
~~END~~


DROP TABLE local_var_tst_1
GO

CREATE TABLE update_test_tbl (
    age int,
    fname char(10),
    lname char(10),
    city nchar(20)
)
GO

TRUNCATE TABLE update_test_tbl
GO

INSERT INTO update_test_tbl(age, fname, lname, city) 
VALUES  (50, 'fname1', 'lname1', 'london'),
        (34, 'fname2', 'lname2', 'paris'),
        (35, 'fname3', 'lname3', 'brussels'),
        (90, 'fname4', 'lname4', 'new york'),
        (26, 'fname5', 'lname5', 'los angeles'),
        (74, 'fname6', 'lname6', 'tokyo'),
        (44, 'fname7', 'lname7', 'oslo'),
        (19, 'fname8', 'lname8', 'hong kong'),
        (61, 'fname9', 'lname9', 'shanghai'),
        (29, 'fname10', 'lname10', 'mumbai')
GO
~~ROW COUNT: 10~~


CREATE TABLE update_test_tbl2 (
    year int,
    lname char(10),
)
GO

TRUNCATE TABLE update_test_tbl2
GO

INSERT INTO update_test_tbl2(year, lname) 
VALUES  (51, 'lname1'),
        (34, 'lname3'),
        (25, 'lname8'),
        (95, 'lname9'),
        (36, 'lname10')
GO
~~ROW COUNT: 5~~


UPDATE update_test_tbl SET fname = 'fname13'
FROM update_test_tbl t1
INNER JOIN update_test_tbl2 t2
ON t1.lname = t2.lname
WHERE year > 50
GO
~~ROW COUNT: 2~~


declare @a varchar(4000) = '';
UPDATE update_test_tbl SET fname = 'fname13', @a = @a + fname
FROM update_test_tbl t1
INNER JOIN update_test_tbl2 t2
ON t1.lname = t2.lname
WHERE year > 50
select @a
GO
~~ROW COUNT: 2~~

~~START~~
varchar
fname13   fname13   
~~END~~


DROP TABLE update_test_tbl2;
GO

DROP TABLE update_test_tbl
GO

drop table ident_tst
GO

create table local_var_tst (id int) 
GO

insert into local_var_tst values (1)
insert into local_var_tst values (2)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


declare @i int = 0, @j int
update local_var_tst set id = id + 2, @i = id, @j = @i * 2, @i = @j
select @i, @j
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Babelfish does not support assignment to the same variable in SELECT. variable name: "@i")~~


declare @i int = 0, @j int
update local_var_tst set id = id + 2, @i += id, @j = @i * 2
select @i, @j
GO
~~ROW COUNT: 2~~

~~START~~
int#!#int
7#!#14
~~END~~


select * from local_var_tst order by id
GO
~~START~~
int
3
4
~~END~~


drop table local_var_tst
GO
